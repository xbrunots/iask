(window.webpackJsonp=window.webpackJsonp||[]).push([["layout-toggle"],{f3hN:function(e,t,n){"use strict";n.r(t),n.d(t,"ToolingInfo",(function(){return B})),n.d(t,"LayoutToggle",(function(){return C})),n.d(t,"LayoutToggleTemplate",(function(){return D})),n.d(t,"LayoutToggleStyles",(function(){return L}));var o=n("Zn5T"),a=n("A03o");const i=Object(a.a)(o.a.layoutToggle,"A sample Peregrine Web Component experience",{});var l=n("D57K"),d=n("s9+9"),r=n("o1cI"),s=n("b/Qm"),g=n("Qf6H"),c=n("8X6I"),u=n("SSDD"),p=n("u5KZ"),h=n("Am8i"),m=n("IqCT"),y=n("oePG"),T=n("d0Z1"),b=n("+Ht2");class C extends m.a{constructor(){super(...arguments),this.handleOnScroll=()=>{const e=scrollY<100&&this.layoutState.imageOfTheDayEnabled&&("headingsonly"===this.layoutState.selectedFeedDisplaySetting||"peek"===this.layoutState.selectedFeedDisplaySetting);e!=this.isFeedTranslucent&&(this.isFeedTranslucent=e)}}experienceConnected(){this.templateReady=!1,this.populateTelemetryTags(),this.pageSettingsConnector=Object(b.c)(d.a.ChromiumPageSettings),this.pageSettingsConnector&&Object(T.c)(d.a.ChromiumPageSettings,e=>{this.layoutState=e;const t=scrollY<100&&e.imageOfTheDayEnabled&&("headingsonly"===e.selectedFeedDisplaySetting||"peek"===e.selectedFeedDisplaySetting);this.isFeedTranslucent=t;const n=matchMedia("(prefers-color-scheme:dark)");this.isDarkBackground=n&&n.matches,this.templateReady=!0;const o=null===e.isSingleColumn&&this.config.renderSingleColumn;this.isSingleColumn=r.a.getPslFeedLayoutType===s.b.SingleColumn||o})}getExperienceType(){return o.a.layoutToggle}shadowDomPopulated(){addEventListener("scroll",this.handleOnScroll)}disconnectedCallback(){removeEventListener("scroll",this.handleOnScroll)}populateTelemetryTags(){this.telemetryObject&&(this.singleColumnButtonTelemetryTag=this.telemetryObject.addOrUpdateChild({name:"LayoutSingleColumn",content:{headline:"Toggle for SingleColumn"}}).getMetadataTag(),this.multiColumnButtonTelemetryTag=this.telemetryObject.addOrUpdateChild({name:"LayoutMultiColumn",content:{headline:"Toggle for MultiColumn"}}).getMetadataTag())}updateToggleSelection(e,t){return Object(l.a)(this,void 0,void 0,(function*(){const n=t&&t.target;if(!n||this.isSingleColumn===e)return;const o="path"===n.tagName;p.a.sendActionEvent(o?n.parentElement:n,h.a.Click,h.b.Navigate),this.recordUserLayoutChoice(e),r.a.saveFeedLayoutSetting(e?s.b.SingleColumn:s.b.MultiColumn,s.a.Ntp),Object(c.c)(u.a.FeedLayoutSwitch)}))}recordUserLayoutChoice(e){const t={setting:"single_column",source:"ntp",timestamp:(new Date).getTime(),value:e};g.a.savePreferenceSetting("single_column",t)}}Object(l.d)([y.d],C.prototype,"isSingleColumn",void 0),Object(l.d)([y.d],C.prototype,"isFeedTranslucent",void 0),Object(l.d)([y.d],C.prototype,"isDarkBackground",void 0),Object(l.d)([y.d],C.prototype,"templateReady",void 0);var v=n("6BDD"),S=n("0QZK"),f=n("eUhr");const k=v.b`
    <div id="layoutToggle" class="layoutToggle_updated">
        <span class=${e=>x(e,"iconContainer_updated linearFeedIcon",e.isSingleColumn)}
        ${Object(f.b)(e=>e.singleColumnButtonTelemetryTag)}
            @click=${(e,t)=>null==e?void 0:e.updateToggleSelection(!0,t.event)}
        >
            ${S.vb}
        </span>
        <span class=${e=>x(e,"iconContainer_updated gridFeedIcon",!e.isSingleColumn)}
        ${Object(f.b)(e=>e.multiColumnButtonTelemetryTag)}
            @click=${(e,t)=>null==e?void 0:e.updateToggleSelection(!1,t.event)}
        >
            ${S.ab}
        </span>   
    </div>
`,x=(e,t,n)=>(t+=e.isDarkBackground||e.isFeedTranslucent?" dark_updated":" light_updated",t+=n?"":" unselected"),O=v.b`
    <div id="layoutToggle" class=${e=>F(e)}>
        <span class="iconContainer gridView ${e=>e.isSingleColumn?"":"selected"}"
        ${Object(f.b)(e=>e.multiColumnButtonTelemetryTag)}
            @click=${(e,t)=>null==e?void 0:e.updateToggleSelection(!1,t.event)}
        >
            ${S.Z}
        </span>
        <span class="iconContainer listView ${e=>e.isSingleColumn?"selected":""}"
        ${Object(f.b)(e=>e.singleColumnButtonTelemetryTag)}
            @click=${(e,t)=>null==e?void 0:e.updateToggleSelection(!0,t.event)}
        >
            ${S.ub}
        </span>
    </div>
`,F=e=>{let t="layoutToggle ";return e.isDarkBackground||e.isFeedTranslucent?t+="dark ":t+="light ",t},D=v.b`
    ${e=>e.config.renderUpdatedLayoutToggle?k:O}
`;var $=n("CzTk"),w=n("4X57");const _=w.a`
.layoutToggle_updated {
    margin-left: 4px;
}

.gridFeedIcon {
    margin-left: 6px;
}
`,j=w.a`
.layoutToggle_updated {
    margin-right: 4px;
}

.gridFeedIcon {
    margin-right: 6px;
}
`,L=w.a`
    /** styles for updated version of layout toggle **/
    .layoutToggle_updated {
        background: none;
        display: flex;
        padding-top: 1px;
        width: fit-content;
    }

    .iconContainer_updated {
        border-radius: 6px;
        width: 30px;
        height: 30px;
    }

    .iconContainer_updated svg, .iconContainer_updated path {
        fill: inherit;
        fill-opacity: inherit;
    }

    .gridFeedIcon svg {
        padding: 5px;
    }

    .linearFeedIcon svg {
        padding: 7px;
    }

    .dark_updated, .dark_updated:hover {
        background: gray;
        fill: white;
    }

    .light_updated, .light_updated:hover {
        background: #EAF1FA;
        fill: #0078D4;
    }

    .unselected {
        background: none;
        cursor: pointer;
        fill: gray;
    }


    /** styles for old version of layout toggle **/
    .layoutToggle {
        border-radius: 99px;
        background: rgba(0, 0, 0, 0.07);
        width: 58px;
    }

    .layoutToggle:hover {
        cursor: pointer;
    }

    svg {
        padding: 3px;
    }

    .iconContainer {
        display: inline-block;
        padding: 3px 3px 0 3px;
        border-radius: 99px;
    }

    .dark {
        background: #404040;
    }

    .dark path {
        fill: #f5f5f5;
    }

    .dark .selected {
        background: #505050;
    }

    .light .selected {
        background: rgba(0, 0, 0, 0.09);
    }
`.withBehaviors(new $.a(_,j)),B={experienceConfigSchema:i}}}]);